% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/DynamicPipeline.R
\name{DynamicPipeline}
\alias{DynamicPipeline}
\title{Class implementing a dynamic pipelining process}
\description{
This \code{\link{DynamicPipeline}} class inherits from the
\code{\link{GenericPipeline}} class. Includes the \strong{execute} method
which provides a dynamic pipelining implementation.
'
}
\section{Inherit}{

This class inherits from \code{\link{GenericPipeline}} and implements the
\code{execute} abstract function.
}

\seealso{
\code{\link{Instance}}, \code{\link{DefaultPipeline}},
         \code{\link{GenericPipeline}}, \code{\link{GenericPipe}},
         \code{\link{\%>|\%}}
}
\section{Super class}{
\code{\link[bdpar:GenericPipeline]{bdpar::GenericPipeline}} -> \code{DynamicPipeline}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{DynamicPipeline$new()}}
\item \href{#method-add}{\code{DynamicPipeline$add()}}
\item \href{#method-removeByPos}{\code{DynamicPipeline$removeByPos()}}
\item \href{#method-removeByPipe}{\code{DynamicPipeline$removeByPipe()}}
\item \href{#method-removeAll}{\code{DynamicPipeline$removeAll()}}
\item \href{#method-execute}{\code{DynamicPipeline$execute()}}
\item \href{#method-get}{\code{DynamicPipeline$get()}}
\item \href{#method-print}{\code{DynamicPipeline$print()}}
\item \href{#method-clone}{\code{DynamicPipeline$clone()}}
}
}
\if{html}{
\out{<details open ><summary>Inherited methods</summary>}
\itemize{
}
\out{</details>}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
Creates a \code{\link{DynamicPipeline}} object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DynamicPipeline$new(pipeline = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{pipeline}}{A \code{\link{list}} of \code{\link{GenericPipe}}
objects. Initializes the flow of \code{\link{GenericPipe}}.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-add"></a>}}
\if{latex}{\out{\hypertarget{method-add}{}}}
\subsection{Method \code{add()}}{
Adds a \code{\link{GenericPipe}} or a
\code{\link{GenericPipe}} list to the pipeline.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DynamicPipeline$add(pipe, pos = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{pipe}}{A \code{\link{GenericPipe}} object or a \code{\link{list}} of
\code{\link{GenericPipe}} objects.}

\item{\code{pos}}{A (\emph{numeric}) value. The value of the position to add.
If it is NULL, \code{\link{GenericPipe}} is appended to the pipeline.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-removeByPos"></a>}}
\if{latex}{\out{\hypertarget{method-removeByPos}{}}}
\subsection{Method \code{removeByPos()}}{
Removes \code{\link{GenericPipe}s} by the position on the
pipeline.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DynamicPipeline$removeByPos(pos)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{pos}}{A (\emph{numeric}) value. The value of the position to remove.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-removeByPipe"></a>}}
\if{latex}{\out{\hypertarget{method-removeByPipe}{}}}
\subsection{Method \code{removeByPipe()}}{
Removes \code{\link{GenericPipe}s} by its name on the
pipeline.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DynamicPipeline$removeByPipe(pipe.name)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{pipe.name}}{A (\emph{character}) value. The
\code{\link{GenericPipe}s} name to remove.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-removeAll"></a>}}
\if{latex}{\out{\hypertarget{method-removeAll}{}}}
\subsection{Method \code{removeAll()}}{
Removes all \code{\link{GenericPipe}s} included on pipeline.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DynamicPipeline$removeAll()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-execute"></a>}}
\if{latex}{\out{\hypertarget{method-execute}{}}}
\subsection{Method \code{execute()}}{
Function where is implemented the flow of the
\code{\link{GenericPipe}s}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DynamicPipeline$execute(instance)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{instance}}{A (\emph{Instance}) value. The \code{\link{Instance}}
that is going to be processed.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get"></a>}}
\if{latex}{\out{\hypertarget{method-get}{}}}
\subsection{Method \code{get()}}{
Gets a list with containing the set of \code{\link{GenericPipe}s}
of the pipeline.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DynamicPipeline$get()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
The set of \code{\link{GenericPipe}s} containing the pipeline.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-print"></a>}}
\if{latex}{\out{\hypertarget{method-print}{}}}
\subsection{Method \code{print()}}{
Prints pipeline representation. (Override print function)
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DynamicPipeline$print(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{Further arguments passed to or from other methods.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DynamicPipeline$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
