% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/TargetAssigningPipe.R
\name{TargetAssigningPipe}
\alias{TargetAssigningPipe}
\title{Class to get the target field of the Instance}
\description{
This class allows searching in the path the \strong{target} of
the \code{\link{Instance}}.
}
\section{Details}{

The targets that are searched can be controlled through the
constructor of the class where \emph{targetsName} will be the string that is
searched within the path and targets has the values that the property can
take.
}

\section{Inherit}{

This class inherits from \code{\link{GenericPipe}} and implements the
\code{pipe} abstract function.
}

\seealso{
\code{\link{AbbreviationPipe}}, \code{\link{ContractionPipe}},
         \code{\link{File2Pipe}}, \code{\link{FindEmojiPipe}},
         \code{\link{FindEmoticonPipe}}, \code{\link{FindHashtagPipe}},
         \code{\link{FindUrlPipe}}, \code{\link{FindUserNamePipe}},
         \code{\link{GuessDatePipe}}, \code{\link{GuessLanguagePipe}},
         \code{\link{Instance}}, \code{\link{InterjectionPipe}},
         \code{\link{MeasureLengthPipe}}, \code{\link{GenericPipe}},
         \code{\link{ResourceHandler}}, \code{\link{SlangPipe}},
         \code{\link{StopWordPipe}}, \code{\link{StoreFileExtPipe}},
         \code{\link{TeeCSVPipe}}, \code{\link{ToLowerCasePipe}}
}
\section{Super class}{
\code{\link[bdpar:GenericPipe]{bdpar::GenericPipe}} -> \code{TargetAssigningPipe}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{TargetAssigningPipe$new()}}
\item \href{#method-pipe}{\code{TargetAssigningPipe$pipe()}}
\item \href{#method-getTarget}{\code{TargetAssigningPipe$getTarget()}}
\item \href{#method-checkTarget}{\code{TargetAssigningPipe$checkTarget()}}
\item \href{#method-getTargets}{\code{TargetAssigningPipe$getTargets()}}
\item \href{#method-clone}{\code{TargetAssigningPipe$clone()}}
}
}
\if{html}{
\out{<details ><summary>Inherited methods</summary>}
\itemize{
\item \out{<span class="pkg-link" data-pkg="bdpar" data-topic="GenericPipe" data-id="getAlwaysBeforeDeps">}\href{../../bdpar/html/GenericPipe.html#method-getAlwaysBeforeDeps}{\code{bdpar::GenericPipe$getAlwaysBeforeDeps()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="bdpar" data-topic="GenericPipe" data-id="getNotAfterDeps">}\href{../../bdpar/html/GenericPipe.html#method-getNotAfterDeps}{\code{bdpar::GenericPipe$getNotAfterDeps()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="bdpar" data-topic="GenericPipe" data-id="getPropertyName">}\href{../../bdpar/html/GenericPipe.html#method-getPropertyName}{\code{bdpar::GenericPipe$getPropertyName()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="bdpar" data-topic="GenericPipe" data-id="hash">}\href{../../bdpar/html/GenericPipe.html#method-hash}{\code{bdpar::GenericPipe$hash()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="bdpar" data-topic="GenericPipe" data-id="setAlwaysBeforeDeps">}\href{../../bdpar/html/GenericPipe.html#method-setAlwaysBeforeDeps}{\code{bdpar::GenericPipe$setAlwaysBeforeDeps()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="bdpar" data-topic="GenericPipe" data-id="setNotAfterDeps">}\href{../../bdpar/html/GenericPipe.html#method-setNotAfterDeps}{\code{bdpar::GenericPipe$setNotAfterDeps()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="bdpar" data-topic="GenericPipe" data-id="setPropertyName">}\href{../../bdpar/html/GenericPipe.html#method-setPropertyName}{\code{bdpar::GenericPipe$setPropertyName()}}\out{</span>}
}
\out{</details>}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
Creates a \code{\link{TargetAssigningPipe}} object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TargetAssigningPipe$new(
  targets = list("ham", "spam"),
  targetsName = list("_ham_", "_spam_"),
  propertyName = "target",
  alwaysBeforeDeps = list(),
  notAfterDeps = list()
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{targets}}{A \code{\link{list}} value. Name of the targets property.}

\item{\code{targetsName}}{A \code{\link{list}} value. The name of folders.}

\item{\code{propertyName}}{A \code{\link{character}} value. Name of the property
associated with the \code{\link{GenericPipe}}.}

\item{\code{alwaysBeforeDeps}}{A \code{\link{list}} value. The dependencies
alwaysBefore (\code{\link{GenericPipe}s} that must be executed before
this one).}

\item{\code{notAfterDeps}}{A \code{\link{list}} value. The dependencies
notAfter (\code{\link{GenericPipe}s} that cannot be executed after
this one).}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-pipe"></a>}}
\if{latex}{\out{\hypertarget{method-pipe}{}}}
\subsection{Method \code{pipe()}}{
Preprocesses the \code{\link{Instance}} to obtain the
target.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TargetAssigningPipe$pipe(instance)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{instance}}{A \code{\link{Instance}} value. The \code{\link{Instance}}
to preprocess.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The \code{\link{Instance}} with the modifications that have
occurred in the pipe.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getTarget"></a>}}
\if{latex}{\out{\hypertarget{method-getTarget}{}}}
\subsection{Method \code{getTarget()}}{
Gets the target from a path.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TargetAssigningPipe$getTarget(path)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{path}}{A \code{\link{character}} value. The path to analyze.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The target of the path.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-checkTarget"></a>}}
\if{latex}{\out{\hypertarget{method-checkTarget}{}}}
\subsection{Method \code{checkTarget()}}{
Checks if the target is in the path.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TargetAssigningPipe$checkTarget(target, path)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{target}}{A \code{\link{character}} value. The target to find in the
path.}

\item{\code{path}}{A \code{\link{character}} value. The path to analize.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
if the target is found, returns target, else returns "".
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getTargets"></a>}}
\if{latex}{\out{\hypertarget{method-getTargets}{}}}
\subsection{Method \code{getTargets()}}{
Gets of targets.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TargetAssigningPipe$getTargets()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Value of targets.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TargetAssigningPipe$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
